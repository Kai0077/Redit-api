// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Redit_api.Data;
using Redit_api.Models;
using Redit_api.Models.Status;

#nullable disable

namespace Redit_api.Data.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20251029102731_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "post_status", new[] { "active", "archived" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "post_status", "post_status", new[] { "active", "archived" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "super_user", "user" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", "user_role", new[] { "user", "super_user" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_status", new[] { "do_not_disturb", "idle", "invisible", "offline", "online" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_status", "user_status", new[] { "offline", "online", "do_not_disturb", "idle", "invisible" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Redit_api.Models.DTO.CommentDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Aura")
                        .HasColumnType("integer")
                        .HasColumnName("aura");

                    b.Property<string>("Commenter")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("commenter");

                    b.PrimitiveCollection<string[]>("Embeds")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("embeds");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int>("PostId")
                        .HasColumnType("integer")
                        .HasColumnName("post_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Redit_api.Models.DTO.CommunityDTO", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("OwnerUsername")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("owner_username");

                    b.PrimitiveCollection<int[]>("PinnedPostIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("pinned_post_ids");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture");

                    b.HasKey("Name");

                    b.ToTable("community", "public");
                });

            modelBuilder.Entity("Redit_api.Models.PostDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Aura")
                        .HasColumnType("integer")
                        .HasColumnName("aura");

                    b.Property<string>("Community")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("community");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.PrimitiveCollection<string[]>("Embeds")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("embeds");

                    b.Property<string>("OriginalPoster")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("original_poster");

                    b.Property<PostStatus>("Status")
                        .HasColumnType("post_status")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("post", "public");
                });

            modelBuilder.Entity("Redit_api.Models.UserDTO", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.Property<UserStatus>("AccountStatus")
                        .HasColumnType("user_status")
                        .HasColumnName("account_status");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<int>("Aura")
                        .HasColumnType("integer")
                        .HasColumnName("aura");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture");

                    b.Property<UserRole>("Role")
                        .HasColumnType("user_role")
                        .HasColumnName("role");

                    b.HasKey("Username");

                    b.ToTable("user", "public");
                });
#pragma warning restore 612, 618
        }
    }
}
